[
  {
    "title": "ReAct状態管理インフラストラクチャ",
    "content": "ReAct処理フローを管理し、コールバックループを防止するためのローカル状態追跡変数を追加しました。これによりLLMモジュールで状態管理を一元化し、ReActと通常のツール処理の間で関心の分離を実現しています。",
    "path": "lua/avante/llm.lua",
    "line_range": [21, 49]
  },
  {
    "title": "重複コールバック防止ロジック",
    "content": "ReActモードでツールを既に処理中の場合に、重複するtool_useコールバックを防止する早期リターンロジックを実装しました。これは、コールバックの実行を許可する前に処理状態をチェックすることで、二重API呼び出しを排除する中核的な修正です。",
    "path": "lua/avante/llm.lua",
    "line_range": [831, 843]
  },
  {
    "title": "ReActパーサーメタデータ拡張",
    "content": "ReActパーサーを拡張して、解析されたコンテンツと共にツール完了状態に関するメタデータを返すようにしました。これにより、プロバイダーはツールが完了か部分的かに基づいて、コールバックをいつトリガーするかについて情報に基づいた判断を行うことができます。",
    "path": "lua/avante/libs/ReAct_parser2.lua",
    "line_range": [160, 167]
  },
  {
    "title": "OpenAIプロバイダーコールバックロジック修正",
    "content": "ReActモード時に、完了した（部分的でない）ツールに対してのみon_stopを呼び出すようにOpenAIプロバイダーを修正しました。これにより、二重呼び出し問題の最初の部分の原因となっていた即座のコールバックを防止します。",
    "path": "lua/avante/providers/openai.lua",
    "line_range": [338, 347]
  },
  {
    "title": "OpenAIストリーム完了ReAct認識",
    "content": "最終コールバックをトリガーする前にReActツールの準備状態をチェックするようにストリーム完了ロジックを更新しました。これにより、ツールが実際に準備できるまでコールバックを延期することで、二重呼び出しの2番目の部分を防止します。",
    "path": "lua/avante/providers/openai.lua",
    "line_range": [414, 431]
  },
  {
    "title": "Geminiプロバイダー一貫性更新",
    "content": "すべてのReAct対応プロバイダー間で一貫した動作を保証するために、Geminiプロバイダーに同様のコールバック防止ロジックを適用しました。これにより、異なるプロバイダー実装間で同じ修正パターンを維持しています。",
    "path": "lua/avante/providers/gemini.lua",
    "line_range": [286, 311]
  },
  {
    "title": "後方互換性のための機能フラグ",
    "content": "必要に応じてユーザーが修正を無効化できるように実験的設定フラグを追加しました。これにより後方互換性を確保し、問題が発生した場合の簡単なロールバック方法を提供し、破壊的変更管理のベストプラクティスに従っています。",
    "path": "lua/avante/config.lua",
    "line_range": [432, 437]
  },
  {
    "title": "トラブルシューティングのためのデバッグログ",
    "content": "ReActフロー全体にわたる包括的なデバッグログで、問題のトラブルシューティングと状態遷移の監視を支援します。これは、ReAct機能の開発、テスト、および今後のメンテナンスに役立ちます。",
    "path": "lua/avante/llm.lua",
    "line_range": [821, 829]
  }
]